---
title: "Architecture"
---

## Data flow

This application uses a Post-Redirect-Get (PRG) pattern. The user submits a form, which sends a POST request to a FastAPI endpoint on the server. The database is updated, and the user is redirected to a GET endpoint, which fetches the updated data and re-renders the Jinja2 page template with the new data.

``` {python}
#| echo: false
#| include: false
from graphviz import Digraph

dot = Digraph()
dot.attr(rankdir='TB')
dot.attr('node', shape='box', style='rounded')

# Create client subgraph at top
with dot.subgraph(name='cluster_client') as client:
    client.attr(label='Client')
    client.attr(rank='topmost')
    client.node('A', 'User submits form', fillcolor='lightblue', style='rounded,filled')
    client.node('B', 'HTML/JS form validation', fillcolor='lightblue', style='rounded,filled')

# Create server subgraph below
with dot.subgraph(name='cluster_server') as server:
    server.attr(label='Server')
    server.node('C', 'Convert to Pydantic model', fillcolor='lightgreen', style='rounded,filled')
    server.node('D', 'Optional custom validation', fillcolor='lightgreen', style='rounded,filled')
    server.node('E', 'Update database', fillcolor='lightgreen', style='rounded,filled')
    server.node('F', 'Middleware error handler', fillcolor='lightgreen', style='rounded,filled')
    server.node('G', 'Render error template', fillcolor='lightgreen', style='rounded,filled')
    server.node('H', 'Redirect to GET endpoint', fillcolor='lightgreen', style='rounded,filled')
    server.node('I', 'Fetch updated data', fillcolor='lightgreen', style='rounded,filled')
    server.node('K', 'Re-render Jinja2 page template', fillcolor='lightgreen', style='rounded,filled')

with dot.subgraph(name='cluster_client_post') as client_post:
    client_post.attr(label='Client')
    client_post.attr(rank='bottommost')
    client_post.node('J', 'Display rendered page', fillcolor='lightblue', style='rounded,filled')

# Add visible edges
dot.edge('A', 'B')
dot.edge('B', 'A')
dot.edge('B', 'C', label='POST Request to FastAPI endpoint')
dot.edge('C', 'D')
dot.edge('C', 'F', label='RequestValidationError')
dot.edge('D', 'E', label='Valid data')
dot.edge('D', 'F', label='Custom Validation Error')
dot.edge('E', 'H', label='Data updated')
dot.edge('H', 'I')
dot.edge('I', 'K')
dot.edge('K', 'J', label='Return HTML')
dot.edge('F', 'G')
dot.edge('G', 'J', label='Return HTML')

dot.render('static/data_flow', format='png', cleanup=True)
```

![Data flow diagram](static/data_flow.png)

The advantage of the PRG pattern is that it is very straightforward to implement and keeps most of the rendering logic on the server side. The disadvantage is that it requires an extra round trip to the database to fetch the updated data, and re-rendering the entire page template may be less efficient than a partial page update on the client side.

## Form validation flow

We've experimented with several approaches to validating form inputs in the FastAPI endpoints.

### Objectives

Ideally, on an invalid input, we would redirect the user back to the form, preserving their inputs and displaying an error message about which input was invalid.

This would keep the error handling consistent with the PRG pattern described in the [Architecture](https://promptlytechnologies.com/fastapi-jinja2-postgres-webapp/docs/architecture) section of this documentation.

To keep the code DRY, we'd also like to handle such validation with Pydantic dependencies, Python exceptions, and exception-handling middleware as much as possible.

### Obstacles

One challenge is that if we redirect back to the page with the form, the page is re-rendered with empty form fields. 

This can be overcome by passing the inputs from the request as context variables to the template. 

But that's a bit clunky, because then we have to support form-specific context variables in every form page and corresponding GET endpoint.

Also, we have to:

1. access the request object (which is not by default available to our middleware), and 
2. extract the form inputs (at least one of which is invalid in this error case), and 
3. pass the form inputs to the template (which is a bit challenging to do in a DRY way since there are different sets of form inputs for different forms).

Solving these challenges is possible, but gets high-complexity pretty quickly.

### Approaches

The best solution, I think, is to use really robust client-side form validation to prevent invalid inputs from being sent to the server in the first place. That makes it less important what we do on the server side, although we still need to handle the server-side error case as a backup in the event that something slips past our validation on the client side.

Here are some patterns we've considered for server-side error handling:

<style>
.styled-table, .styled-table th, .styled-table td {
  border: 1px solid black;
  padding: 8px;
  border-collapse: collapse;
}

.styled-table th:nth-child(1) { width: 5%; }
.styled-table th:nth-child(2) { width: 50%; }
.styled-table th:nth-child(3), 
.styled-table th:nth-child(4),
.styled-table th:nth-child(5) { width: 15%; }
.styled-table th:nth-child(6) { width: 10%; }
</style>

<table class="styled-table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Approach</th>
      <th>Returns to same page</th>
      <th>Preserves form inputs</th>
      <th>Follows PRG pattern</th>
      <th>Complexity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Validate with Pydantic dependency, catch and redirect from middleware (with exception message as context) to an error page with "go back" button</td>
      <td>No</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Low</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Validate in FastAPI endpoint function body, redirect to origin page with error message query param</td>
      <td>Yes</td>
      <td>No</td>
      <td>Yes</td>
      <td>Medium</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Validate in FastAPI endpoint function body, redirect to origin page with error message query param and form inputs as context so we can re-render page with original form inputs</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>High</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Validate with Pydantic dependency, use session context to get form inputs from request, redirect to origin page from middleware with exception message and form inputs as context so we can re-render page with original form inputs</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>High</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Validate in either Pydantic dependency or function endpoint body and directly return error message or error toast HTML partial in JSON, then mount error toast with HTMX or some simple layout-level Javascript</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>No</td>
      <td>Low</td>
    </tr>
  </tbody>
</table>

Presently this template primarily uses option 1 but also supports option 2. Ultimately, I think option 5 will be preferable; support for that [is planned](https://github.com/Promptly-Technologies-LLC/fastapi-jinja2-postgres-webapp/issues/5) for a future update or fork of this template.